selection:
   ### use `&`, `|`, `~` for logical operations on numpy arrays
   ### can use functions from `math`, `np` (numpy), and `awkward` in the expression

new_variables:
   ### [format] name: formula
   ### can use functions from `math`, `np` (numpy), and `awkward` in the expression
   lccand_mask: awkward.JaggedArray.ones_like(lc_eta)

inputs:
   lc_points:
      length: 100
      vars: 
         - lc_x
         - lc_y
         - lc_z
   lc_features:
      length: 100
      vars: 
      ### [format 1]: var_name (no transformation)
      ### [format 2]: [var_name, subtract_by(optional, default=None, no transf.), multiply_by(optional, default=1), clip_min(optional, default=-5), clip_max(optional, default=5), pad_value(optional, default=0)]
         - lc_eta
         - lc_phi
         - lc_nrechits
   lc_mask:
      length: 100
      vars: 
         - lccand_mask

labels:
   ### type can be `simple`, `custom`
   ### [option 1] use `simple` for binary/multi-class classification, then `value` is a list of 0-1 labels
   # type: simple
   # value: [ label_pu, label_pv]
   ### [option 2] otherwise use `custom` to define the label, then `value` is a map
   type: custom
   value: 
      label: _pad(lc_hits_energy_from_cp/lc_energy>=0.1, 100)
      label_mask: _pad(lccand_mask, 100)

observers:
   - event
   - ts_raw_energy
   - ts_eta
   - ts_phi
   - cp_energy
   - cp_pt
   - cp_eta
   - cp_phi
   

weights: